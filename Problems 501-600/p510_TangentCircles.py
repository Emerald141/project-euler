# Circles A and B are tangent to each other and to line L at
# three distinct points.
# Circle C is inside the space between A, B and L, and tangent to all three.
# Let rA, rB and rC be the radii of A, B and C respectively.
# 
# Let S(n) = Σ rA + rB + rC, for 0 < rA ≤ rB ≤ n
# where rA, rB and rC are integers.
# The only solution for 0 < rA ≤ rB ≤ 5 is rA = 4, rB = 4 and rC = 1,
# so S(5) = 4 + 4 + 1 = 9. You are also given S(100) = 3072.
# 
# Find S(10^9).

# THEORY:
#
# The geometry works out to show that
#   rC = rA * rB / (rA + 2 * sqrt(rA * rB) + rB).
# Any valid triple (rA,rB,rC) can be scaled up by any constant to form another
# valid triple, so the problem reduces to finding all such triples with GCD 1,
# then summing 10^9 / rB over the rB's.
# 
# Assume GCD(rA,rB,rC) = 1.
# Then if some prime p divides rC, p divides rA * rB, so p divides exactly one
# of rA and rB. Because rA * rB must be a square number, p^2 divides exactly
# one of rA and rB.
# p does not divide the denominator, so p^2 divides rC.
# 
# Now assume some prime p divides rA. Then because p^2 must divides rA * rB,
# either p^2 divides rA, or p^2 does not divide rA and p divides rB; assume
# the latter case. Because rA * rB is square, the greatest power of p which
# divides rB is p^(2k-1) for some positive integer k. Then
#   rC = X^2 * p^(2k) / (Yp + 2Xp^k + Zp^(2k))
# for some X, Y, Z coprime with p.
# If this is NOT be divisible by p, as required, then p^(2k) divides Yp + 2Xp^k.
# This means Yp = Wp^(2k) - 2Xp^k for some W, so Y = Wp^(2k-1) + 2Xp^(k-1).
# This implies p divides Y, a contradiction.
# Therefore p^2 divides rA.
# 
# A similar argument shows that if some prime p divides rB, then p^2 divides rB.
# Therefore rA, rB, and rC are all square numbers.
# Call their respective square roots a, b, and c. Then:
#   c^2 = (ab)^2 / (a^2 + 2ab + b^2)
# which works out to
#   b = ac / (a - c).
# 
# Let g = gcd(a, c). Then g does not divide b by assumption, so because
# g^2 divides ac (the numerator), g^2 divides a-c (the denominator).
# If x divides a-c, then because ac/(a-c) is an integer, x divides at least one
# of a and c; and because it divides a-c, it divides the other, which implies
# that x divides g.
# Therefore a - c = g^2, and b = (c/g)^2 + c.
# 
# Given c, any and all pairs (a,b) can be generated by picking some divisor
# g of c whose square does not divide c, and using the formulas just above.
# To generate all triples (a,b,c), we can iterate through g^2's.
# For each g^2, for each multiple of g less than g^2,
# have the starting c be that multiple. Then continually increase c by g^2
# until b becomes larger than 10^9.
# The first triple found in such a way shouldn't be counted because a > b
# (except when g=1, then they're equal), but b > a in all other cases.

from time import time
import sys
sys.path.append("../Library")
from peresult import peresult
from itertools import count
from math import gcd

def solve(cap = 10 ** 9):
    result = 0
    for g in count(1):
        old_result = result
        for start_c in range(g, g ** 2 + (g == 1), g):
            c = start_c + g ** 2 * (g != 1)
            while True:
                a = c + g ** 2
                b = (c // g) ** 2 + c
                if b ** 2 > cap:
                    break
                if gcd(gcd(a, b), c) == 1:
                    this_count = (cap // b ** 2) * ((cap // b ** 2) + 1) // 2
                    result += this_count * (a ** 2 + b ** 2  + c ** 2)
                c += g ** 2
        if result == old_result:
            return result

if __name__ == "__main__":
    start = time()
    peresult(510, solve(), time() - start)

# The sequence of triangle numbers is generated by adding
# the natural numbers. So the 7th triangle number would be
# 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
#
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have
# over five divisors.
#
# What is the value of the first triangle number to have over
# five hundred divisors?

# THEORY:
# T_n = n * (n + 1) / 2
# Because n and n + 1 share no factors other than 1, their factor counts
# can be multiplied together to form the triangle number's factor count.
# If one of them is divisible by 2^k but not 2^(k+1), dividing by 2 causes
# the factor count to be multiplied by (k-1)/k.

from time import time
import sys
sys.path.append("../Library")
from peresult import peresult

def solve(cap = 500):
    low_num_factors = 1
    high_num = 2
    high_num_factors = 2
    while low_num_factors * high_num_factors < cap + 1:
        low_num_factors = high_num_factors
        high_num += 1
        # Compute the number of factors of the new high_num
        high_num_factors = 2
        for possible_factor in range(2, int(high_num ** .5) + 1):
            if high_num % possible_factor == 0:
                high_num_factors += 2
        if high_num ** .5 % 1 == 0:
            high_num_factors -= 1
        if high_num % 2 == 0:
            two_pow_divisors = 0
            while high_num % 2 ** (two_pow_divisors + 1) == 0:
                two_pow_divisors += 1
            high_num_factors *= two_pow_divisors - 1
            high_num_factors //= two_pow_divisors
    return (high_num - 1) * high_num // 2

if __name__ == "__main__":
    start = time()
    peresult(12, solve(), time() - start)
